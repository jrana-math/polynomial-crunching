-- Comments on lines 14-27:
-- The sets weight and weights are different. weights is a collection of some 'weight's. They are both initialized as
-- the empty set (lines 14 and 15) because that way we can create whichever set we like just by adding its elements. 
-- weight is a string of ones and zeros. The frequency of one or zero happening varies between 0 and 7 while 
-- freq(0)+freq(1)=2n always holds.
-- We are more interested now in the case n=7, so that number means 'weights' is a set of vectors ('weight's) whose length  
-- is 14 and entries are completed by 7 ones and zeros. 
-- These 'weight's will be used along with the lex order to create several weight orders. 
-- The inner for loop we use (lines 20-25) is to characterize the sets called weight. Before it, we have a local variable
-- (line 19) that makes the set weight empty again, so we can repeat the process over and over. Immediately after the inner 
-- for loop (line 26) we use the function append(setS, elementK) that adds elementK to SetS. This is also used on line 98
-- to "add" the entries of the vectors weight.

weights = {};
weight = {};

for i to 2^14-1 do 
(
    weight = {};
    for j from 1 to 14 do
    (
        k = 1;
	if i%(2^j) < 2^(j-1) then k = 0;
	weight = append(weight, k);
    );
    weights = append(weights, weight);
);


-- Comments on lines 50-72:
-- On line 52, #weights is the size of weights - i.e. how many different vectors we have. On line 54, we define the ring
-- on which we are working. As one can see, its order depends on weights#a. In general, if we have a list S of length k>n-2,
-- then S#(n-1) has as its output the nth element listed on the list (set) S. So weights#a is the (a+1)th weight listed on
-- the set weights. Also, our outer loop (starting on lines 52) guarantees we deal with all of the different 'weight's.
-- On line 56 we define a 2x7 matrix M whose first and second rows would be, respectively, {x_11, ..., x_17} and {x_21, ..., x_27}.
-- On line 57 we define L to be the set of all subsets of order 6 of the set {0, 1, ..., 6}. On line 58, we create an 
-- empty set called notgroebner. This set, in turn, will be the one containing our seven (at least for n=7) determinantal polynomials.
-- On the body of the for loop (lines 61-72), we first (62-69) create eight 3x3 matrices which we will use to get each of
-- the seven (or n choose 6 in general) determinantal polynomials. On this part of the loop's body, we see a bunch of elements
-- of the form L#i#j for an integer j in {0, 1, ..., }. The process for getting such a number is as follows: since L
-- is the set containing all the subsets of order 6 of {0, 1, ..., 6}, L#i will be one of these subsets - e.g. i=1
-- gives us {0, 1, ..., 5}. Once we have L#i, we take L#i#j, which is the (j+1)th element listed, from left to right, in L#i.
-- Secondly (line 70), we define, using remark 3.3 from the paper, one of the determinantal polynomials by g 
-- and then (line 71) add g to the set notgroebner. We do this process until notgroebner has all the n choose 6 polynomials
-- that it is supposed to have. 
--
--
--

matches = {};

for a to #weights-1 do
(
    R = ZZ/101[splice {x_11 .. x_17, x_21 .. x_27}, MonomialOrder=>{Weights=>weights#a, Lex}];
    N = vars R;
    M = matrix{{N_(0, 0), N_(0, 1), N_(0, 2), N_(0, 3), N_(0, 4), N_(0, 5), N_(0, 6)}, {N_(0, 7), N_(0, 8), N_(0, 9), N_(0, 10), N_(0, 11), N_(0, 12), N_(0, 13)}};
    L = subsets(7, 6);
    polynomials = {};

    for i to (#L-1) do 
    (
	M1 = matrix{{1, 1, 1}, {M_(0, L#i#0), M_(0, L#i#1), M_(0, L#i#2)}, {M_(1, L#i#0), M_(1, L#i#1), M_(1, L#i#2)}};
	M2 = matrix{{1, 1, 1}, {M_(0, L#i#0), M_(0, L#i#3), M_(0, L#i#4)}, {M_(1, L#i#0), M_(1, L#i#3), M_(1, L#i#4)}};
	M3 = matrix{{1, 1, 1}, {M_(0, L#i#1), M_(0, L#i#3), M_(0, L#i#5)}, {M_(1, L#i#1), M_(1, L#i#3), M_(1, L#i#5)}};
	M4 = matrix{{1, 1, 1}, {M_(0, L#i#2), M_(0, L#i#4), M_(0, L#i#5)}, {M_(1, L#i#2), M_(1, L#i#4), M_(1, L#i#5)}};
	M5 = matrix{{1, 1, 1}, {M_(0, L#i#0), M_(0, L#i#1), M_(0, L#i#3)}, {M_(1, L#i#0), M_(1, L#i#1), M_(1, L#i#3)}};
	M6 = matrix{{1, 1, 1}, {M_(0, L#i#0), M_(0, L#i#2), M_(0, L#i#4)}, {M_(1, L#i#0), M_(1, L#i#2), M_(1, L#i#4)}};
	M7 = matrix{{1, 1, 1}, {M_(0, L#i#1), M_(0, L#i#2), M_(0, L#i#5)}, {M_(1, L#i#1), M_(1, L#i#2), M_(1, L#i#5)}};
	M8 = matrix{{1, 1, 1}, {M_(0, L#i#3), M_(0, L#i#4), M_(0, L#i#5)}, {M_(1, L#i#3), M_(1, L#i#4), M_(1, L#i#5)}};
	g = det(M1)*det(M2)*det(M3)*det(M4)-det(M5)*det(M6)*det(M7)*det(M8);
	polynomials = append(polynomials, g);
    );

-- Comments on lines 80-83:
-- We first (line 80) create the ideal I whose basis is the set of determinantal polynomials which we called notgroebner.
-- Then (line 81) we define groebner as the Groebner basis of I. Subsequently, we let notgroebnersize and groebnersize to be 
-- the size of the set notgroebner and and groebner, respectively. 
--

    I = ideal(polynomials);
    groebner = gens gb I;
    polynomialsSize = #polynomials;
    groebnersize = numgens source groebner;
    
-- Comments on lines 96-125:
-- On lines 96 and 97, we define the counter of matches n and the flag for matches. This variable flag works as follows: whenever
-- we get a match between determinantal polynomials and those that constitute a Groebner basis, we set flag=1. By doing that, when we go
-- through the loop which starts on line 101, we break it on line 104 and goes to the outer loop - the one which starts on line 98.
-- This, in turn, makes the program run faster.
-- Note that we have three for loops here. One that acts on the groebner basis (lines 98-125), one on the set of determinantal 
-- polynomials (lines 101-118) and the last on the integers from 1 to 100 (lines 106-116) due to our finite field Z/101.
--It seems that the matches are always occuring at k=1 or k=100, which could allow us to speed up the program much more.
--
--
    
    n=0;
    flag=0;
    for i to groebnersize-1 do
    (
        flag=0;
        for j to notgroebnersize-1 do 
	(
	    --If we already have a match we move on to the next element of groebner.
	    if flag > 0 then break;
	    --Otherwise we search for a match.
	    for k from 1 to 100 do 
	    (
		--If we find a match then count it and break out.
	        if (k*groebner_(0, i) == notgroebner#j) then
		(
		    n=n+1;
		    flag=1;
		    --print k;
		    --print (k*groebner_(0, i)-notgroebner#j);
		    break;
		);
	    );
	);
	--Stop looking for matches if we know we don't have a groebner basis.
	if flag==0 then 
	(
	    --print "NO MATCH";
	    break;
	);
    );
    
-- Comments on lines 133-140:
-- On line 134 we create the empty set matches, which will eventually be the set of weights under which (and along with
-- the lex order) we have that the set groebner is the subset of the set notgroebner. On line 135, we make the integer n
-- into a string, where n is the number of matches between polynomials in the sets groebner and notgroebner. We then print the weight
-- weights#a from the bigger loop and when matches happen as often as elements in the set groebner, then we add such a weight to the set matches. 
    
    text = "The total number of matches is ";
    nonumber = toString(n);
    dot = ".";
    p = text | nonumber | dot;
    print p;
    print weights#a;
    if n == groebnersize then matches = append(matches, weights#a);
    )
    
    ###################################################################################################################################################################
    
    --By running the above program, we discovered that the only values of k producing matches were 1 and 100.
    --This allowed us to make a new version of the program that runs about 6 times faster and produces identical output.
    --This new version is listed below and is very, very similar to the code above in form.
    
    weights = {};
weight = {};
matches = {};

for i to 2^14-1 do 
(
    weight = {};
    for j from 1 to 14 do
    (
        k = 1;
	if i%(2^j) < 2^(j-1) then k = 0;
	weight = append(weight, k);
    );
    weights = append(weights, weight);
);


for a to #weights-1 do
(
    R = QQ[splice {x_11 .. x_17, x_21 .. x_27}, MonomialOrder=>{Weights=>weights#a, Lex}, Degrees=>{{1, 0, 0, 0, 0, 0, 0}, {0, 1, 0, 0, 0, 0, 0}, {0, 0, 1, 0, 0, 0, 0}, {0, 0, 0, 1, 0, 0, 0}, {0, 0, 0, 0, 1, 0, 0}, {0, 0, 0, 0, 0, 1, 0}, {0, 0, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 0, 0}, {0, 1, 0, 0, 0, 0, 0}, {0, 0, 1, 0, 0, 0, 0}, {0, 0, 0, 1, 0, 0, 0}, {0, 0, 0, 0, 1, 0, 0}, {0, 0, 0, 0, 0, 1, 0}, {0, 0, 0, 0, 0, 0, 1}}];
    N = vars R;
    M = matrix{{N_(0, 0), N_(0, 1), N_(0, 2), N_(0, 3), N_(0, 4), N_(0, 5), N_(0, 6)}, {N_(0, 7), N_(0, 8), N_(0, 9), N_(0, 10), N_(0, 11), N_(0, 12), N_(0, 13)}};
    L = subsets(7, 6);
    polynomials = {};

    for i to (#L-1) do 
    (
	M1 = matrix{{1, 1, 1}, {M_(0, L#i#0), M_(0, L#i#1), M_(0, L#i#2)}, {M_(1, L#i#0), M_(1, L#i#1), M_(1, L#i#2)}};
	M2 = matrix{{1, 1, 1}, {M_(0, L#i#0), M_(0, L#i#3), M_(0, L#i#4)}, {M_(1, L#i#0), M_(1, L#i#3), M_(1, L#i#4)}};
	M3 = matrix{{1, 1, 1}, {M_(0, L#i#1), M_(0, L#i#3), M_(0, L#i#5)}, {M_(1, L#i#1), M_(1, L#i#3), M_(1, L#i#5)}};
	M4 = matrix{{1, 1, 1}, {M_(0, L#i#2), M_(0, L#i#4), M_(0, L#i#5)}, {M_(1, L#i#2), M_(1, L#i#4), M_(1, L#i#5)}};
	M5 = matrix{{1, 1, 1}, {M_(0, L#i#0), M_(0, L#i#1), M_(0, L#i#3)}, {M_(1, L#i#0), M_(1, L#i#1), M_(1, L#i#3)}};
	M6 = matrix{{1, 1, 1}, {M_(0, L#i#0), M_(0, L#i#2), M_(0, L#i#4)}, {M_(1, L#i#0), M_(1, L#i#2), M_(1, L#i#4)}};
	M7 = matrix{{1, 1, 1}, {M_(0, L#i#1), M_(0, L#i#2), M_(0, L#i#5)}, {M_(1, L#i#1), M_(1, L#i#2), M_(1, L#i#5)}};
	M8 = matrix{{1, 1, 1}, {M_(0, L#i#3), M_(0, L#i#4), M_(0, L#i#5)}, {M_(1, L#i#3), M_(1, L#i#4), M_(1, L#i#5)}};
	g = det(M1)*det(M2)*det(M3)*det(M4)-det(M5)*det(M6)*det(M7)*det(M8);
	polynomials = append(polynomials, g);
    );

    I = ideal(polynomials);
    groebner = gens gb I;
    polynomialsize = #polynomials;
    groebnersize = numgens source groebner;
    
    n=0;
    for i to groebnersize-1 do
    (
        for j to polynomialsize-1 do 
	(
	    if (groebner_(0, i) == polynomials#j or (-1)*groebner_(0, i) == polynomials#j) then
	    (
		n=n+1;
		break;
	    );
	);
    );
    
    text = "The total number of matches is ";
    nonumber = toString(n);
    dot = ".";
    p = text | nonumber | dot;
    print p;
    print weights#a;
    if n == groebnersize then matches = append(matches, weights#a);
    );
